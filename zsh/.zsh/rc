#Colors.
autoload -U colors
colors
setopt prompt_subst

setopt hist_ignore_dups

#. ~/.zsh/env
. ~/.zsh/prompt
. ~/.zsh/aliases

HISTFILE=~/.zsh_history
HISTIGNORE="ls:ls *:cd:cd -:pwd;exit:date:* --help"
HISTSIZE=1000000
SAVEHIST=1000000
setopt extendedglob notify
setopt append_history
setopt inc_append_history
setopt nonomatch
setopt share_history # share command history data

bindkey -e

# cut word
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars "/=;@:{},| "
zstyle ':zle:*' word-style unspecified

# initialize autocomplete here, otherwise functions won't be loaded
# also load compdef so git-completion doesn't complain about no compdef
fpath=(~/.zsh/completion $fpath)

autoload -U compinit compdef
compinit

zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

[[ -f "$HOME/.dircolors" ]] && ( eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)" )

#ssh
# function ssh() {
#     local window_name=$(tmux display -p '#{window_name}')
#     command ssh $@
#     tmux rename-window $window_name
# }
#rbenv
[[ -d "$HOME/.rbenv" ]] && eval "$(rbenv init -)"

function gem() {
    $HOME/.rbenv/shims/gem $*
    if [ "$1" = "install" ] || [ "$1" = "i" ] || [ "$1" = "uninstall" ] || [ "$1" = "uni" ]
    then
        rbenv rehash
        rehash
    fi
}
#tmux
#test -f ~/.tmuxrc && . ~/.tmuxrc
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator
[[ -s /usr/local/share/zsh/site-functions/_aws ]] && source /usr/local/share/zsh/site-functions/_aws
#[[ -x "`which aws_zsh_completer.sh 2>&1`" ]] && source aws_zsh_completer.sh

if [[ -x "`which brew 2>&1`" ]]; then
#z.sh
_Z_CMD=j
  if [ -f `brew --prefix`/etc/profile.d/z.sh ]; then
    . `brew --prefix`/etc/profile.d/z.sh
  fi
#golang
  if [ -f `brew --prefix go`/share/zsh/site-functions/go ]; then
    . `brew --prefix go`/share/zsh/site-functions/go
  fi
fi

# phpbrew
[[ -e $HOME/.phpbrew ]] && source $HOME/.phpbrew/bashrc

#nvm
[[ -s $HOME/.nvm/nvm.sh ]] && source $HOME/.nvm/nvm.sh

function mkcd(){mkdir -p $1 && cd $1}

# case ${OSTYPE} in
#   darwin*)
#     # VBoxManage startvm --type headless boot2docker-vm // if fail
#     $(boot2docker shellinit)
# gcloud
# [ -f "${HOMEBREW_CASK_PREFIX}/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ] \
#   && source "${HOMEBREW_CASK_PREFIX}/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
[ -f "${HOMEBREW_CASK_PREFIX}/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ] \
  && source "${HOMEBREW_CASK_PREFIX}/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
#

if (( $+commands[direnv] )); then
  eval "$(direnv hook zsh)"
fi

# gwt  - create git worktree branch
function gwt() {
  GIT_CDUP_DIR=`git rev-parse --show-cdup`
  git worktree add ${GIT_CDUP_DIR}git-worktrees/$1 -b $1
}

# fgbr - checkout git branch
function fgbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.*//")
}
# fgrbr - checkout git remote branch
function fgrbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
    fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
# fgshow - show git commits
function fgshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'EOF'
                {}
EOF"
}

# fgvim - show files
function fgvim() {
  # local selected_file=$(git ls-files | fzf -m --preview 'head -100 {}')
  local selcted_files
  selected_files=$(git ls-files | fzf -m --preview 'head -100 {}') && \
  vim $selected_files
}

# fhist - show history
function fhist() {
  local tac
  if which tac > /dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi
  BUFFER=$(history -n 1 | \
    eval $tac | \
    fzf --query "$LBUFFER" --reverse)
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N fhist
bindkey '^r' fhist

# fcd - change directory
function fcd () {
  local selected_dir=$(find $HOME/src -type d -maxdepth 5 -not -path '*/\.*' | fzf)
  if [ -n "$selected_dir" ]; then
    BUFFER="pushd \"$selected_dir\""
    zle accept-line
  fi
  zle reset-prompt
}
zle -N fcd
bindkey '^x^f' fcd

# fssh - ssh hosts
function fssh(){
  local selected_host
  local cmd='ssh'
  if [[ -e ssh_config ]]; then
    selected_host=$(cat ssh_config | grep -i '^host' | awk '{print $2}' | grep -v '*' | fzf)
    cmd="ssh -F ssh_config"
  else
    selected_host=$(cat ~/.ssh/config | grep -i '^host' | awk '{print $2}' | grep -v '*' | fzf)
  fi

  if [ -n "$selected_host" ]; then
    BUFFER="$cmd $selected_host"
  fi
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N fssh
bindkey '^x^j' fssh

# fgce - ssh hosts
function fgce(){
  local selected_host=$(gcloud compute instances list --filter="STATUS:RUNNING" | \
  tail -n +2 | \
  fzf)
  if [ -n "$selected_host" ]; then
    read name zone internal_ip external_ip<<< $( awk -F@ '{print $1, $2, $5 $6}' <<< $selected_host )
    BUFFER="gcloud compute ssh --zone $zone $name"
  fi
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N fgce
bindkey '^x^l' fgce

# tag
if (( $+commands[tag] )); then
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  alias ag=tag
fi
