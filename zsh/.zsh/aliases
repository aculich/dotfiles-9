case "${OSTYPE}" in
darwin*)
  alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport'
  alias chrome='open "/Applications/Google Chrome.app" --args --renderer-process-limit=3'
  alias date='gdate'
  alias dayone="/usr/local/bin/dayone -j=~/Library/Group\ Containers/5U8NS4GX82.dayoneapp2/Data/Auto\ Import/Default\ Journal.dayone"
  alias delmacfile="find . -name \".DS_Store\" -exec rm -f {} \;"
  alias imgsize="mdls -name kMDItemPixelWidth -name kMDItemPixelHeight"
  alias keyboard_link='sudo kextload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/'
  alias keyboard_unlink='sudo kextunload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/'
  alias ldd="echo ldd is not on OSX. Use otool -L."
  alias less='less -R'
  alias ll="ls -laG"
  alias ls="ls -1G"
  alias ql='qlmanage -p "$@" >& /dev/null'
  alias strace="echo strace is not on OSX. Use dtruss"
  alias timeout='gtimeout'
  alias xattr_w='xattr -w com.apple.metadata:kMDItemFinderComment'
  ;;
linux*)
  alias anice='ionice -c2 -n7 nice -n19'
  alias keyboard_link="xinput enable 'AT Translated Set 2 keyboard' && xmodmap ~/.Xmodmap"
  alias keyboard_unlink="xinput disable 'AT Translated Set 2 keyboard' && xmodmap ~/.XmodmapHHK"
  alias ll='ls -la --color'
  alias ls='ls --color'
  alias open='gnome-open'
  ;;
esac

alias ..='cd ..'
alias cp='cp -i'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep -i --color=auto'
alias mkdir='mkdir -p'
alias mv='mv -i'
alias public_ip=get_public_ip
alias rm='rm -i'
alias rsync="rsync -avz --exclude=\".svn\" --exclude=\".DS_Store\""
alias sc='screen -U -D -RR'
alias screen='screen -U -D -RR'
alias tig='tig --all'
alias tmux='tmux -2'
alias v="$(which vim)"
alias vi="$(which vim)"
alias weechat-curses='TERM=screen-256color weechat-curses'
alias weechat='TERM=screen-256color weechat'

function get_public_ip () {
  dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{print $2}'
}

# git
# if [[ -f "$HOME/.gitconfig" ]]; then
#   eval `\
#     sed -e 's/;.*$//' -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' < "$HOME/.gitconfig" | \
#     sed -n -e "/^\[alias\]/,/^\s*\[/{/^[^;].*\=.*/p;}" | \
#     sed -e 's/\([^ =]\+\).*/alias g\1="git \1"/g'
#   `
# fi

# homebrew
function brew() {
  local CMD=/usr/local/bin/brew
  $CMD $*
  if [[ $? -eq 0 ]]; then
    $CMD bundle dump --global --force
    $CMD bundle cleanup --global
  fi
}

# pip
function pip() {
  local CMD=/usr/local/var/pyenv/shims/pip
  $CMD $*
  if [[ $? -eq 0 ]]; then
    $CMD freeze > ~/requirements.txt
  fi
}

# ripgrep
if (( $+commands[rg] )); then
  alias rg='rg --hidden --glob "!.git"'
fi

# docker
#if (( $+commands[docker-machine] )); then
#  alias docker='docker $(docker-machine config)'
#  alias machine='docker-machine'
#fi
if (( $+commands[docker-compose] )); then
  alias dco='docker-compose'
fi

## docker container
alias dc='docker container'
alias dcid='docker container ls -q'
alias dcls='docker container ls'
alias drun='docker container run'
alias dcrm='docker rm  $(docker ps -a | grep -v "_config\|_data" | tail -n +2 | cut -c-12)'

## docker image
alias di='docker image'
alias diid='docker image ls -q'
alias dils='docker image ls'
alias dirm='docker rmi $(docker image ls -qf dangling=true)'

## docker volume
alias dv='docker image'
alias dvid='docker volume ls -q'
alias dvls='docker volume ls'
alias dvrm='docker volume rm $(docker volume ls -qf dangling=true)'

#
alias dip='docker inspect -f "{{ .NetworkSettings.IPAddress }}"'

function dsh() {
  machine ssh dev '[ -f /var/lib/boot2docker/nsenter ] || docker run --rm -v /var/lib/boot2docker/:/target jpetazzo/nsenter'
  machine ssh dev /var/lib/boot2docker/docker-enter "$@"
}

alias kc='kubectl'

# Haskell
alias ghc='stack ghc --'
alias ghci='stack ghci'
alias runghc='stack runghc --'

# golang
alias get=go_get
function go_get () {
  if [ $# -gt 0 ]; then
    go get -d github.com/$argv
  fi
}

# python
alias activate="source $PYENV_ROOT/versions/miniconda3-latest/bin/activate"

# ruby
alias rake='noglob rake'
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
alias urldecode='python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'

# php
alias sf='app/console --no-ansi'
alias sfcl='sf cache:clear'
alias sfcw='sf cache:warmup'
alias sfroute='sf router:debug'
alias sfcontainer='sf container:debug'
alias sft='bin/phpunit -c app'

# adb
alias apk='adb shell pm list packages -f'

alias tf='terraform'

# GCP
function gcloud_login () {
  docker run -ti --name gcloud-config -e CLOUDSDK_CONFIG=/.config/gcloud google/cloud-sdk gcloud auth login
}

function gcloud_shell () {
  if [ $# -gt -1 ]; then
    docker run -ti --rm -e CLOUDSDK_CONFIG=/.config/gcloud --volumes-from gcloud-config google/cloud-sdk $argv
  else
    docker run -ti --rm -e CLOUDSDK_CONFIG=/.config/gcloud --volumes-from gcloud-config google/cloud-sdk /bin/bash
  fi
}

function gcloud_image_push () {
  if [ $# -gt 0 ]; then
    docker run --rm -v $HOME/.docker:$HOME/.docker -v $HOME/.config:/.config seiji/gcloud /bin/sh -c "eval '$(machine env dev)' && gcloud docker -- push $argv"
  fi
}

function gcloud_image_pull () {
  if [ $# -gt 0 ]; then
    docker run --rm -v $HOME/.docker:$HOME/.docker -v $HOME/.config:/.config seiji/gcloud /bin/sh -c "eval '$(machine env dev)' && gcloud docker -- pull $argv"
  fi
}

alias gclogin=gcloud_login
alias gcshell=gcloud_shell
alias gcpush=gcloud_image_push
alias gcpull=gcloud_image_pull

alias gke='gcloud beta container'

function gce () {
  if [ $# -gt 1 ]; then
    if [ "$1" == "info" ]; then
      gcloud compute instances describe $2
    elif [ "$1" == "create" ]; then
      gcloud compute instances create $2 \
        --boot-disk-auto-delete \
        --image-family=centos-6 \
        --image-project=centos-cloud \
        --machine-type=f1-micro \
        --maintenance-policy TERMINATE \
        --preemptible \
        --zone asia-east1-a
    elif [ "$1" == "delete" ]; then
      gcloud compute instances delete $2
    else
      gcloud compute $argv
    fi
  elif [ $# -gt 0 ]; then
    if [ "$1" == "instances" ]; then
      gcloud compute instances list
    else
      gcloud compute $argv
    fi
  else
    gcloud compute $argv
  fi
}

# $ gcshell $CONFIG_CONTAINER gcloud config set project $PROJECT_NAME // if you could set project.
function aws_cloudwatch_set_alarm_state_ok () {
  aws cloudwatch set-alarm-state \
    --alarm-name $1 \
    --state-value OK \
    --state-reason "test"
}

function aws_cloudwatch_set_alarm_state_alarm () {
  aws cloudwatch set-alarm-state \
    --alarm-name $1 \
    --state-value ALARM \
    --state-reason "test"
}
function aws_ec2_instances () {
  aws ec2 describe-instances \
    --filter "Name=instance-state-name,Values=running" \
    --query 'Reservations[].Instances[]' \
    --output json \
    | jq -r '.[]|{ InstanceId:.InstanceId, Name:(.Tags[] | select(.Key == "Name").Value), Project:(.Tags[] | select(.Key=="project").Value), Env:(.Tags[] | select(.Key=="env").Value), InstanceType:.InstanceType }'
}

function aws_ec2 images_amazn2 () {
  aws ec2 describe-images \
    --owners amazon \
    --filters \
    "Name=name,Values=amzn2-ami-hvm*x86_64-gp2" \
    --query 'reverse(sort_by(Images, &CreationDate))[].[Name,ImageId]' \
    --output json
}

function aws_ecr_image_latest () {
  aws ecr describe-images \
    --repository-name $1 \
    --query 'sort_by(imageDetails,& imagePushedAt)[-1]' \
    --output json
}

function aws_rds_instances () {
  aws rds describe-db-instances \
    --query 'DBInstances[]' \
    --output json
}

function aws_s3_buckets () {
  aws s3api list-buckets \
    --query 'Buckets[]' | jq -r '.[] | [.Name, .CreationDate]'
}

