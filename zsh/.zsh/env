setopt no_global_rcs

export MANPATH="/usr/local/share/man:/usr/X11/man:/usr/share/man"

export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MUSSAGUS="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL=

export EDITOR=vim
export CLICOLOR=1
export TERM=xterm-256color
export LSCOLORS=Gxfxcxdxhxegedahagacgx
export PATH=/usr/local/bin:/usr/local/sbin:$HOME/local/bin:$HOME/bin:$PATH
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share

case ${OSTYPE} in
  darwin*)
    #export SSL_CERT_FILE=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt
    # openssl
    export PATH=/usr/local/opt/openssl/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$LD_LIBRARY_PATH
    export CPATH=/usr/local/opt/openssl/include:$LD_LIBRARY_PATH

    export DEVELOPER_DIR=$(xcode-select -p)
    # Xcode6 symbolicate
    export PATH="$DEVELOPER_DIR/../SharedFrameworks/DTDeviceKitBase.framework/Versions/A/Resources:$PATH"
    # Unity
    export PATH="/Applications/Unity/Unity.app/Contents/Mono/bin:$PATH"
    ;;
  linux*)
    export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
    export NO_AT_BRIDGE=1 # naulitulus
    if [[ -s $HOME/.linuxbrew ]]; then
      export PATH="$HOME/.linuxbrew/bin:$PATH"
      export LD_LIBRARY_PATH="$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH"
    fi

    if [[ -s /usr/local/cuda ]]; then
      # CUDA Toolkit
      export CUDA_HOME=/usr/local/cuda
      export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
      export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
      export CPATH=/usr/local/cuda/include:$CPATH
      # cuDNN
      export LIBRARY_PATH=/usr/local/cuda/lib64:$LIBRARY_PATH
    fi

    ;;
esac

# GCP
export GCP_HOME="$HOME/google-cloud-sdk"
export PATH="${GCP_HOME}/bin:${PATH}"

# docker/machine
# export DOCKER_CERT_PATH=~/.boot2docker/certs/boot2docker-vm
# export DOCKER_TLS_VERIFY=1

# export VIRTUALBOX_BOOT2DOCKER_URL=https://github.com/boot2docker/boot2docker/releases/download/v1.4.1/boot2docker.iso

if type machine >/dev/null; then
  machine url >&/dev/null
  if [ $? -eq 0 ]; then
    eval $(docker-machine env)
    #export DOCKER_HOST=`machine url` DOCKER_AUTH=identity
  fi
fi

# FZF; rg
if (( $+commands[fzf] )) && (( $+commands[rg] )); then
  export FZF_DEFAULT_COMMAND='rg --nocolor -g ""'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_DEFAULT_OPTS='
  --color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108
  --color info:108,prompt:109,spinner:108,pointer:168,marker:168
  --height 40% --reverse --border
'
fi

# Git
if (( $+commands[git] )); then
  case ${OSTYPE} in
    darwin*)
      export GIT_ROOT=$(brew --prefix git)
      export PATH="$GIT_ROOT/share/git-core/contrib/diff-highlight:$PATH"
      ;;
    linux*)
      export GIT_ROOT=/usr/lib/git
      export PATH="/usr/share/doc/git/contrib/diff-highlight:$PATH"
      ;;
  esac
fi

# Haskel
if [[ -s $HOME/.local ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi

# Ruby
export RBENV_ROOT="$HOME/.rbenv"
export PATH="$RBENV_ROOT/bin:$PATH"
#export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
export BUNDLER_EDITOR="vim +VimFiler"

#export GEM_HOME=$HOME/.gem
#export GEM_PATH=$HOME/.gem
#export PATH="$GEM_HOME/bin:$PATH"

# Python
if (( $+commands[pyenv] )); then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi
if [ -d '/usr/local/miniconda3' ]; then
  export MINICONDA_ROOT="/usr/local/miniconda3"
  export PATH="$MINICONDA_ROOT/bin:$PATH"
fi

# Node
export NODE_PATH=/usr/local/lib/node_modules
export PATH=$HOME/.nodebrew/current/bin:$PATH

# Haskel
if (( $+commands[ghc] )); then
  export CABALBIN=$HOME/.cabal/bin
  export PATH=$CABALBIN:$PATH
fi

# Golang
#export PATH=$HOME/go/bin:$PATH

if (( $+commands[go] )); then
  case ${OSTYPE} in
    darwin*)
      export GOROOT=$(brew --prefix go)/libexec
      ;;
    linux*)
      export GOROOT=/usr/lib/go
      ;;
  esac
  export GOPATH=$HOME
  export GOBIN=$GOPATH/bin
  export PATH=$GOBIN:$GOROOT/bin:$PATH
fi
